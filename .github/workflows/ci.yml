name: Release on tag

on:
  push:
    tags:
      - 'v*'

jobs:
  build_installer:
    permissions:
      contents: read
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.7'
      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_build.txt
      - name: Install Inno Setup (winget ‚Üí direct download ‚Üí choco)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Continue'
          function Get-InnoVersion {
            try {
              $path = (Get-Command iscc.exe -ErrorAction SilentlyContinue).Source
              if (-not $path) {
                $path = (Get-ChildItem "C:/Program Files (x86)/Inno Setup*" -Recurse -Filter iscc.exe -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
              }
              if ($path) {
                return (Get-Item $path).VersionInfo.ProductVersion
              }
            } catch {}
            return $null
          }

          $targetVersion = [Version]'6.5.1.0'
          $installed = $null
          $raw = Get-InnoVersion
          if ($raw) {
            try { $installed = [Version]$raw } catch {}
          }
          if ($installed -and $installed -ge $targetVersion) {
            Write-Output "‚úÖ Inno Setup $($installed) already installed."
            return
          }

          # Try winget if available (often missing on Windows Server images)
          $winget = Get-Command winget -ErrorAction SilentlyContinue
          if ($winget) {
            Write-Output "‚úÖ winget found. Installing/Upgrading Inno Setup..."
            winget install --id JRSoftware.InnoSetup -e -s winget --silent --accept-package-agreements --accept-source-agreements --disable-interactivity
            if ($LASTEXITCODE -eq 0) {
              Write-Output "‚úÖ winget succeeded"
              return
            } else {
              Write-Output "‚ö†Ô∏è winget failed with exit code $LASTEXITCODE; will try direct download."
            }
          } else {
            Write-Output "‚ÑπÔ∏è winget not available on this runner; trying direct download."
          }

          # Direct download (static URL for 6.5.1)
          try {
            Write-Output "‚¨áÔ∏è Downloading Inno Setup 6.5.1 (static URL)..."
            $url = 'https://files.jrsoftware.org/is/6/innosetup-6.5.1.exe'
            $installer = 'innosetup-6.5.1.exe'
            Invoke-WebRequest -Uri $url -OutFile $installer -UseBasicParsing
            $proc = Start-Process -FilePath ".\$installer" -ArgumentList '/VERYSILENT','/SUPPRESSMSGBOXES','/NORESTART' -PassThru -Wait
            if ($proc.ExitCode -eq 0) {
              Write-Output "‚úÖ direct download install succeeded"
              return
            } else {
              Write-Output "‚ö†Ô∏è direct download install failed with exit code $($proc.ExitCode)."
            }
          } catch {
            Write-Output "‚ö†Ô∏è direct download failed: $($_.Exception.Message)"
          }

          # Chocolatey fallback (upgrade to latest available)
          Write-Output "üç´ Using Chocolatey to upgrade..."
          choco upgrade innosetup --no-progress -y
      - name: Build installer
        shell: cmd
        env:
          AppId: ${{ secrets.INNO_APP_ID }}
        run: |
          call build.bat
      - name: Ensure SHA256 exists
        shell: pwsh
        run: |
          if (-not (Test-Path 'heat_sheet_pdf_highlighter_installer.exe.sha256')) {
            if (Test-Path 'heat_sheet_pdf_highlighter_installer.exe') {
              $h = (Get-FileHash 'heat_sheet_pdf_highlighter_installer.exe' -Algorithm SHA256).Hash.ToLower()
              "$h  heat_sheet_pdf_highlighter_installer.exe" | Out-File -Encoding ascii -NoNewline 'heat_sheet_pdf_highlighter_installer.exe.sha256'
            }
          }
      - name: Upload installer artifacts
        uses: actions/upload-artifact@v4
        with:
          name: installer
          if-no-files-found: error
          path: |
            heat_sheet_pdf_highlighter_installer.exe
            heat_sheet_pdf_highlighter_installer.exe.sha256

  generate_notes:
    runs-on: windows-latest
    permissions:
      contents: read
      models: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Determine previous tag
        shell: pwsh
        run: |
          git fetch --tags --force
          $current = "${{ github.ref_name }}"

          # Determine previous FINAL tag (vX.Y.Z) below current version, even if current is prerelease
          $base = ($current -replace '^v','') -replace '[-+].*$',''
          try { $currentVersion = [Version]$base } catch { $currentVersion = $null }

          $all = git tag -l 'v*' --sort=-v:refname
          $final = @()
          foreach ($t in $all) {
            if ($t -match '^v\d+\.\d+\.\d+$') {
              $ver = $t.Substring(1)
              try { $final += [PSCustomObject]@{ Tag=$t; Version=[Version]$ver } } catch {}
            }
          }

          $prev = ""
          if ($currentVersion -ne $null) {
            $prevObj = $final | Where-Object { $_.Version -lt $currentVersion } | Select-Object -First 1
            if ($prevObj) { $prev = $prevObj.Tag }
          }

          # Fallback to previous tag by history if none found
          if (-not $prev) {
            $prev = (git describe --tags --abbrev=0 "$current^") 2>$null
            if (-not $prev) { $prev = "" }
          }

          "CURRENT_TAG=$current" | Out-File -FilePath $env:GITHUB_ENV -Append
          "PREV_TAG=$prev"       | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "Current tag: $current"
          Write-Output "Previous tag: $prev"
      - name: Collect commit messages
        shell: pwsh
        run: |
          if ($env:PREV_TAG) {
            git log --pretty=format:"%s%n%n%b" "$env:PREV_TAG..$env:CURRENT_TAG" > commits_raw.txt
          } else {
            git log -1 --pretty=format:"%s%n%n%b" "$env:CURRENT_TAG" > commits_raw.txt
          }
          if (-not (Get-Content commits_raw.txt | Where-Object {$_})) {
            'No commits found between tags.' | Out-File commits_raw.txt
          }
          (Get-Content commits_raw.txt) | ForEach-Object { '- ' + $_ } | Out-File commits.txt -Encoding utf8
          Get-Content commits.txt | Select-Object -First 50
      - name: Generate deterministic release notes
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          git fetch --tags --force | Out-Null

          $current = $env:CURRENT_TAG
          $prev = $env:PREV_TAG
          if ([string]::IsNullOrWhiteSpace($prev)) {
            $prev = (git rev-list --max-parents=0 HEAD).Trim()
          }

          $range = "$prev..$current"
          $rawCommits = git log --no-merges --pretty=format:"%s" $range

          $repo = "${{ github.repository }}"
          $fullChangelog = "https://github.com/$repo/compare/$prev...$current"

          $categories = [ordered]@{
            'Features'      = @()
            'Fixes'         = @()
            'Performance'   = @()
            'Docs'          = @()
            'Refactor'      = @()
            'Tests'         = @()
            'Build'         = @()
            'CI'            = @()
            'Style'         = @()
            'Dependencies'  = @()
            'Reverts'       = @()
            'Other'         = @()
          }

          $emoji = @{
            'Features'     = '‚ú®'
            'Fixes'        = 'üêõ'
            'Performance'  = 'üöÄ'
            'Docs'         = 'üìù'
            'Refactor'     = '‚ôªÔ∏è'
            'Tests'        = '‚úÖ'
            'Build'        = 'üì¶'
            'CI'           = 'üîß'
            'Style'        = 'üé®'
            'Dependencies' = '‚¨ÜÔ∏è'
            'Reverts'      = 'üîô'
            'Other'        = '‚Ä¢'
          }

          foreach ($c in $rawCommits) {
            $c = $c.Trim()
            if (-not $c) { continue }
            if ($c -eq $current) { continue }
            # Skip pure tag/version messages like "v1.3.3-rc1"
            if ($c -match '^(?i)v?\d+\.\d+\.\d+(?:[-+\.][0-9A-Za-z.-]+)?$') { continue }
            # Skip messages that are just a list of versions like
            # "v1.3.4-rc2, v1.3.4-rc1, v1.3.3-rc3" (optional trailing period)
            if ($c -match '^(?i)\s*(?:v?\d+\.\d+\.\d+(?:[-+\.][0-9A-Za-z.-]+)?)(?:\s*,\s*v?\d+\.\d+\.\d+(?:[-+\.][0-9A-Za-z.-]+)?)*(?:\s*(?:and|&)\s*v?\d+\.\d+\.\d+(?:[-+\.][0-9A-Za-z.-]+)?)?\s*\.?\s*$') { continue }

            $lower = $c.ToLowerInvariant()
            # Skip release/tag housekeeping commits that include a version
            if ($lower -match '\b(tag|release|prepare|prep|bump|version|cut|publish|changelog)\b' -and $lower -match '\bv?\d+\.\d+\.\d+') { continue }
            $target = 'Other'
            if     ($lower -match '^(feat)(\(.+\))?!?:\s') { $target = 'Features' }
            elseif ($lower -match '^(fix|hotfix|bugfix)(\(.+\))?!?:\s') { $target = 'Fixes' }
            elseif ($lower -match '^(perf)(\(.+\))?!?:\s') { $target = 'Performance' }
            elseif ($lower -match '^(docs?)(\(.+\))?!?:\s') { $target = 'Docs' }
            elseif ($lower -match '^(refactor)(\(.+\))?!?:\s') { $target = 'Refactor' }
            elseif ($lower -match '^(test)(\(.+\))?!?:\s') { $target = 'Tests' }
            elseif ($lower -match '^(build)(\(.+\))?!?:\s') { $target = 'Build' }
            elseif ($lower -match '^(ci)(\(.+\))?!?:\s') { $target = 'CI' }
            elseif ($lower -match '^(style)(\(.+\))?!?:\s') { $target = 'Style' }
            elseif ($lower -match '^(revert)') { $target = 'Reverts' }
            elseif ($lower -match '(dependabot|^deps?:|\bbump\b)') { $target = 'Dependencies' }

            $pretty = $c -replace '^[a-zA-Z]+(\(.+?\))?!?:\s*',''
            $pretty = $pretty.TrimEnd('.')
            $categories[$target] += "- $pretty"
          }

          $lines = @()
          $lines += "What's Changed"
          $lines += ""

          $addedAny = $false
          foreach ($k in $categories.Keys) {
            $items = $categories[$k]
            if ($items.Count -gt 0) {
              $addedAny = $true
              $lines += "${($emoji[$k])} $k"
              $lines += $items
              $lines += ""
            }
          }

          if (-not $addedAny) {
            $lines += "- Internal updates"
            $lines += ""
          }

          $lines += "**Full Changelog**: $fullChangelog"

          $outPath = "release_notes.md"
          $lines -join "`r`n" | Out-File -FilePath $outPath -Encoding utf8 -NoNewline
      - name: Polish release notes with GitHub Models
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = 'Stop'
          $outPath = "release_notes.md"
          if (-not (Test-Path $outPath)) { exit 0 }

          $original = Get-Content $outPath -Raw
          if ([string]::IsNullOrWhiteSpace($original)) { exit 0 }

          $lines = $original -split "`r`n"
          $footer = $lines[-1]

          $system = @(
            'You are a precise release-notes editor. Improve clarity and flow without inventing changes. Keep it concise.',
            '- Only rewrite the "What''s Changed" section lines.',
            '- Do NOT add or remove items beyond rewriting text and grouping.',
            '- Do NOT include the final line (Full Changelog) in your output.',
            '- Do NOT wrap the output in code fences or blocks (no code-fenced Markdown).',
            '- Use short, parallel, present-tense bullet points.',
            '- Preserve technical accuracy; no speculation.'
          ) -join "`n"

          $user = @(
            "Rewrite the following What's Changed bullets for clarity and concision. Keep the existing categories and bullets, but you may merge obviously redundant lines. Do not add new items. Output only Markdown for the section, without a trailing Full Changelog line.",
            '',
            $original
          ) -join "`n"

          $payload = @{ 
            model = 'openai/gpt-4o'
            messages = @(
              @{ role = 'system'; content = $system },
              @{ role = 'user'; content = $user }
            )
            temperature = 0.2
          } | ConvertTo-Json -Depth 6

          try {
            $resp = Invoke-RestMethod -Method Post -Uri 'https://models.github.ai/inference/chat/completions' -ContentType 'application/json' -Headers @{ Authorization = "Bearer $env:GITHUB_TOKEN" } -Body $payload
            $content = $resp.choices[0].message.content
            if (-not $content) { throw 'Empty model response' }

            $clean = [regex]::Replace($content, '(?im)^\s*Full Changelog:.*$', '')
            # Strip any accidental Markdown code fences (``` or ```lang)
            $clean = [regex]::Replace($clean, '(?im)^\s*```[a-zA-Z0-9_-]*\s*$', '')
            $final = $clean.TrimEnd() + "`r`n`r`n" + $footer
            $final | Out-File -FilePath $outPath -Encoding utf8 -NoNewline
          }
          catch {
            Write-Host "AI polish failed: $($_.Exception.Message). Using original notes."
          }
      - name: Upload release notes artifact
        uses: actions/upload-artifact@v4
        with:
          name: release_notes
          if-no-files-found: error
          path: release_notes.md

  release:
    runs-on: windows-latest
    needs: [build_installer, generate_notes]
    permissions:
      contents: write
    steps:
      - name: Download installer artifacts
        uses: actions/download-artifact@v4
        with:
          name: installer
          path: .
      - name: Download release notes artifact
        uses: actions/download-artifact@v4
        with:
          name: release_notes
          path: .
      - name: Create GitHub Release from tag
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          generate_release_notes: false
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') }}
          files: |
            heat_sheet_pdf_highlighter_installer.exe
            heat_sheet_pdf_highlighter_installer.exe.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

